server.port=10086

# \u53EF\u4EE5\u4EE3\u66FFWebMvcConfig\u91CC\u7684addResourceHandlers\u5B9E\u73B0\u4E00\u4E9B\u7B80\u5355\u7684\u6620\u5C04
# spring.mvc.static-path-pattern=/static/**
# spring.resources.static-locations=file:${user.dir}/web/

spring.profiles.active=dev

spring.mail.host = smtp.qiye.fake.com
spring.mail.port = 25
spring.mail.username = hfc@fake.com
spring.mail.password = fake-password
mail.from = hfc@fake.com
mail.to = hfc@fake.com


################# \u6570\u636E\u5E93\u8FDE\u63A5\u914D\u7F6E ###############

# https://github.com/alibaba/druid/wiki/DruidDataSource\u914D\u7F6E
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql://localhost:3306/douban?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&allowMultiQueries=true&serverTimezone=GMT%2B8
spring.datasource.druid.username=root
spring.datasource.druid.password=123456

# \u5F00\u542F\u54EA\u4E9B\u8FC7\u6EE4\u5668\uFF0C\u53EF\u9009\u8FC7\u6EE4\u5668\u522B\u540D\u89C1druid.jar:/META_INF/druid-filter.properties
# DruidDataSource.java\u91CC\u9762\u6709\u6839\u636Edruid.filters\u83B7\u53D6\u53C2\u6570\u7684\u5165\u53E3
spring.datasource.druid.filters=stat,wall,slf4j
# druid\u652F\u6301\u4E24\u79CD\u65B9\u5F0F\u65B0\u589E\u8FDE\u63A5\uFF0C\u4E00\u79CD\u662F\u901A\u8FC7\u5F00\u542F\u4E0D\u540C\u7684\u5B88\u62A4\u7EBF\u7A0B\u6309\u9700\u589E\u52A0\uFF0C\u53E6\u4E00\u79CD\u662F\u901A\u8FC7\u7EBF\u7A0B\u6C60\u5F02\u6B65\u65B0\u589E\uFF0C\u8FD9\u4E2A\u65B9\u5F0F\u901A\u8FC7\u8BBE\u7F6Easync-init=true
spring.datasource.druid.async-init=false

# \u8FDE\u63A5\u6C60\u4E2Dmin-idle\u6570\u91CF\u4EE5\u5185\u7684\u8FDE\u63A5\uFF0C\u7A7A\u95F2\u65F6\u95F4\u8D85\u8FC7min-evictable-idle-time-millis\uFF0C\u5219\u4F1A\u6267\u884Ckeep-alive\u64CD\u4F5C\uFF0C\u9ED8\u8BA4\u4E3Atrue
spring.datasource.druid.keep-alive=true
spring.datasource.druid.initial-size=3
spring.datasource.druid.min-idle=3
spring.datasource.druid.max-active=18
spring.datasource.druid.max-wait=60000
# -1\u8868\u793A\u4E0D\u5F00\u542F\uFF1B\u5F00\u542F\u540E\uFF0C\u5F53\u7B49\u5F85\u8FDE\u63A5\u7684\u7EBF\u7A0B\u6570\u5927\u4E8E\u8BE5\u503C\u65F6\uFF0Cdruid\u4F1A\u76F4\u63A5\u629B\u51FA\u5F02\u5E38\uFF0C\u800C\u975E\u963B\u585E\u7B49\u5F85\u53BB\u65B0\u5EFA\u8FDE\u63A5
spring.datasource.druid.max-wait-thread-count=-1
# \u8D85\u8FC7min-idle\u90E8\u5206\u7684\u8FDE\u63A5\u5982\u679C\u8DDD\u79BB\u4E0A\u6B21\u4F7F\u7528\u8D85\u8FC7min-evictable-idle-time-millis\uFF0C\u90A3\u4E48\u56DE\u6536\u8BE5\u8FDE\u63A5\uFF1B
# \u6CA1\u6709\u8D85\u8FC7min-idle\u7684\u8FDE\u63A5\u5728keepAlive\u4E3Atrue\u4E14\u8DDD\u79BB\u4E0A\u6B21\u4F7F\u7528\u8D85\u8FC7keep-alive-between-time-millis\u7684\u60C5\u51B5\u4E0B\u53D6\u51FA\u8FDB\u884C\u53EF\u7528\u6027\u68C0\u67E5\u3002
# \u8D85\u8FC7max-evictable-idle-time-millis\uFF08\u7F3A\u7701\u9ED8\u8BA47\u5C0F\u65F6\uFF09\u7684\u8FDE\u63A5\uFF0C\u5373\u4F7FkeepAlive\u4E3Atrue\uFF0C
# \u540C\u65F6\u8FDE\u63A5\u6570\u5C0F\u4E8E\u7B49\u4E8Emin-idle\u4E5F\u4F1A\u88AB\u56DE\u6536\uFF0C\u8FD9\u65F6\u8FDE\u63A5\u6C60\u91CC\u8FDE\u63A5\u6570\u53EF\u80FD\u4E3A0\u3002
spring.datasource.druid.min-evictable-idle-time-millis=300000

# \u8868\u793A\u5728\u4ECE\u6C60\u4E2D\u83B7\u53D6\u8FDE\u63A5\u65F6\u8981\u4E0D\u8981\u68C0\u6D4B\u662F\u5426\u6709\u6548
# test-on-borrow\uFF1A\u8868\u793A\u5728\u501F\u7528\u8FDE\u63A5\u65F6\u662F\u5426\u8981\u53BB\u68C0\u67E5\u8FDE\u63A5\u53EF\u7528\u6027\uFF0C\u6BCF\u6B21\u90FD\u68C0\u67E5\u6BD4\u8F83\u8017\u6027\u80FD\uFF0Cmysql\u670D\u52A1\u7AEF\u957F\u8FDE\u63A5\u4FDD\u6D3B\u65F6\u95F4\u9ED8\u8BA48h\uFF0C
#                 \u6BCF\u6B21\u4F7F\u7528\u8FDE\u63A5\u5747\u4F1A\u66F4\u65B0\u8BE5\u65F6\u95F4
# test-while-idle\uFF1A\u8868\u793A\u4F1A\u5728\u501F\u7528\u8FDE\u63A5\u65F6\u5224\u65AD\u5F53\u524D\u65F6\u95F4\u8DDD\u79BB\u4E0A\u6B21\u4F7F\u7528\u65F6\u95F4\u662F\u5426\u8D85\u8FC7\u9608\u503C\uFF08\u901A\u8FC7time-between-eviction-runs-millis\u6765\u63A7\u5236\uFF0C\u9ED8\u8BA4\u4E3A60s\uFF09\uFF0C
#                  \u5F53\u8D85\u8FC7\u9608\u503C\u65F6\u4F1A\u5728\u4F7F\u7528\u524D\u8FDB\u884C\u8FDE\u63A5\u53EF\u7528\u6027\u68C0\u67E5\uFF0C\u76F8\u6BD4test-on-borrow\u66F4\u8282\u7701\u6027\u80FD\uFF0C\u9ED8\u8BA4\u65F6\u5F00\u542F\u72B6\u6001
# test-on-return\uFF1A\u8868\u793A\u5728\u5F52\u8FD8\u8FDE\u63A5\u65F6\u8FDB\u884C\u53EF\u7528\u6027\u68C0\u67E5\uFF0C\u6BD4\u8F83\u8017\u6027\u80FD\uFF0C\u9ED8\u8BA4\u662Ffalse
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.time-between-eviction-runs-millis=60000

# \u5982\u679C\u4E00\u4E2A\u8FDE\u63A5\u4ECE\u6C60\u4E2D\u53D6\u51FA\u4F7F\u7528\u7684\u65F6\u95F4\u8D85\u51FA\u4E86remove-abandoned-timeout-millis\uFF0C\u5E76\u4E14remove-abandoned\u8BBE\u7F6E\u4E3Atrue\uFF0C
# \u90A3\u4E48\u8BE5\u8FDE\u63A5\u4F1A\u88AB\u76F4\u63A5\u56DE\u6536\u3002\u8FD9\u4E2A\u64CD\u4F5C\u4E3B\u8981\u662F\u4E3A\u4E86\u9632\u6B62\u8FDE\u63A5\u88AB\u4F7F\u7528\u540E\u6CA1\u6709\u53CA\u65F6\u8C03\u7528close\u5F52\u8FD8\u5BFC\u81F4\u65E0\u6CD5\u88AB\u518D\u6B21\u4F7F\u7528\u800C\u5F15\u8D77\u5185\u5B58\u6CC4\u9732\u3002
# \u4E0D\u8FC7\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u8FD9\u4E2A\u529F\u80FD\u662F\u88AB\u5173\u95ED\u7684\uFF0C\u56E0\u4E3A\u5E38\u89C1\u7684orm\u6846\u67B6\u4E00\u822C\u4F1A\u5728\u7528\u5B8C\u8FDE\u63A5\u65F6\u8C03\u7528close\u3002
spring.datasource.druid.remove-abandoned=false

spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-open-prepared-statements=20
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# \u5728\u6709\u6570\u636E\u5E93\u4E0D\u652F\u6301Ping\u65B9\u6CD5\u9A8C\u8BC1\u8FDE\u63A5\u7684\u60C5\u51B5\u4E0B\u624D\u4F1A\u4F7F\u7528\u8FD9\u4E2A\u8BED\u53E5
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.validation-query-timeout=3

# \u5927\u4E8E0\u65F6\u8868\u793A\u542F\u7528druid\u76D1\u63A7\u8BB0\u5F55\u6301\u4E45\u5316\uFF0C\u6BCF\u9694time-between-log-stats-millis\u7684\u65F6\u95F4\u5C31\u65E5\u5FD7\u8F93\u51FA\u8BB0\u5F55druid\u7684\u72B6\u6001\u6570\u636E
spring.datasource.druid.time-between-log-stats-millis=0
# \u542F\u52A8\u76D1\u63A7\u9875\u9762\uFF0C\u5F53\u524D\u9879\u76EE\u662Fhttp://127.0.0.1:10086/druid/index.html
spring.datasource.druid.stat-view-servlet.enabled=true


################# MQ\u8FDE\u63A5\u914D\u7F6E ###############

spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin
spring.rabbitmq.virtual-host=/
# \u751F\u4EA7\u8005\u53D1\u9001\u540E\u9700\u8981MQ\u786E\u8BA4\u6536\u5230\uFF0C\u4EE5\u6B64\u6765\u786E\u4FDD\u6D88\u606F\u6210\u529F\u53D1\u9001\u5230\u4EA4\u6362\u5668
# none \u8868\u793A\u786E\u8BA4\u673A\u5236\u5173\u95ED\uFF1B
# simple \u8868\u793A\u540C\u6B65\u7B49\u5F85\u786E\u8BA4\uFF1B
# correlated \u8868\u793A\u5F02\u6B65\u786E\u8BA4\uFF0C\u9700\u8981\u5B9E\u73B0\u56DE\u8C03\u65B9\u6CD5
spring.rabbitmq.publisher-confirm-type=simple
# \u53EF\u4EE5\u5728\u6D88\u606F\u6CA1\u6709\u88AB\u8DEF\u7531\u5230\u6307\u5B9A\u7684queue\u65F6\u5C06\u6D88\u606F\u8FD4\u56DE\uFF0C\u800C\u4E0D\u662F\u4E22\u5F03
spring.rabbitmq.publisher-returns=false
spring.rabbitmq.listener.concurrency=3
spring.rabbitmq.listener.max-concurrency=5
spring.rabbitmq.listener.prefetch=5

# \u662F\u5426\u8981\u5F00\u542FMQ\u529F\u80FD\u6A21\u5757
mq.feature.open=false
mq.queue.simpleModeName=test_simple_mode
mq.queue.workModeName=test_work_mode
mq.exchange.pubSubName=test_logs_pubsub_exchange
mq.exchange.routingName=test_logs_routing_exchange
mq.exchange.topicName=test_logs_topic_exchange


################# mybatis\u914D\u7F6E ###############

# \u5177\u4F53\u914D\u7F6E\u9879\u53EF\u4EE5\u67E5\u9605MybatisProperties.java
mybatis.mapper-locations=classpath:mapper/*Mapper.xml
#mybatis.configuration.cache-enabled=true \u597D\u50CF\u6CA1\u5565\u7528

################# kafka\u914D\u7F6E ###############
### \u53EF\u53C2\u8003\uFF1Ahttps://kafka.apache.org/documentation/#configuration

spring.kafka.bootstrap-servers=127.0.0.1:10010
spring.kafka.template.default-topic=topic-hfc
spring.kafka.admin.fail-fast=true

##### kafka\u751F\u4EA7\u8005 #####
# \u662F\u5426\u8981\u542F\u7528kafka\u751F\u4EA7\u8005\u529F\u80FD\u6A21\u5757
kafka.producer.feature.on=false
# \u9700\u8981\u591A\u5C11\u4E2A\u5206\u533A\u526F\u672C\u63A5\u6536\u6D88\u606F\u751F\u4EA7\u8005\u624D\u8BA4\u4E3A\u6D88\u606F\u5199\u5165\u6210\u529F
# 0\uFF1A\u751F\u4EA7\u8005\u4E0D\u7B49\u5F85\u4EFB\u4F55\u6765\u81EA\u670D\u52A1\u5668\u7684\u54CD\u5E94\uFF1B1\uFF1A\u53EA\u8981\u96C6\u7FA4\u7684Leader\u8282\u70B9\u7684\u54CD\u5E94\uFF1Ball\uFF1A\u9700\u8981\u6240\u6709\u5206\u533A\u526F\u672C\u7684\u54CD\u5E94
spring.kafka.producer.acks=all
# \u751F\u4EA7\u8005\u4ECE\u670D\u52A1\u5668\u6536\u5230\u7684\u9519\u8BEF\u6709\u53EF\u80FD\u662F\u4E34\u65F6\u6027\u7684\u9519\u8BEF\u4ECE\u6B21\u6570
spring.kafka.producer.retries=0
# \u6307\u5B9A\u4E00\u4E2A\u6279\u6B21\u6D88\u606F\u53EF\u4EE5\u4F7F\u7528\u7684\u5185\u5B58\u5927\u5C0F\uFF0C\u5B57\u8282
spring.kafka.producer.batch-size=16384
# \u6307\u5B9A\u751F\u4EA7\u8005\u5728\u53D1\u9001\u6279\u6B21\u4E4B\u524D\u7B49\u5F85\u66F4\u591A\u6D88\u606F\u52A0\u5165\u6279\u6B21\u7684\u65F6\u95F4\uFF0C\u589E\u52A0\u5EF6\u8FDF\uFF0C\u63D0\u9AD8\u541E\u5410\u91CF
spring.kafka.producer.properties.linger.ms=1
spring.kafka.producer.properties.connections.max.idle.ms=300000
# \u8BBE\u7F6E\u751F\u4EA7\u8005\u5185\u5B58\u7F13\u51B2\u533A\u7684\u5927\u5C0F\uFF0C\u751F\u4EA7\u8005\u7528\u5B83\u7F13\u51B2\u8981\u53D1\u9001\u5230\u670D\u52A1\u5668\u7684\u6D88\u606F
spring.kafka.producer.buffer-memory=33554432
# \u6570\u636E\u538B\u7F29\u683C\u5F0F\uFF0C\u6709snappy\u3001gzip\u548Clz4\uFF0Csnappy\u7B97\u6CD5\u6BD4\u8F83\u5747\u8861\uFF0Cgzip\u4F1A\u6D88\u8017\u66F4\u9AD8\u7684cpu\uFF0C\u4F46\u538B\u7F29\u6BD4\u66F4\u9AD8
spring.kafka.producer.compression-type=none
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringDeserializer

##### kafka\u6D88\u8D39\u8005 #####
# \u662F\u5426\u8981\u542F\u7528kafka\u6D88\u8D39\u8005\u529F\u80FD\u6A21\u5757
kafka.consumer.feature.on=false
spring.kafka.consumer.group-id=group-hfc
# \u5FC3\u8DF3\u5468\u671F
spring.kafka.consumer.heartbeat-interval=10000
# \u6D88\u8D39\u8005\u662F\u5426\u81EA\u52A8\u63D0\u4EA4\u504F\u79FB\u91CF
# \u9ED8\u8BA4\u503C\u662Ftrue\uFF0C\u4E3A\u4E86\u907F\u514D\u51FA\u73B0\u91CD\u590D\u6570\u636E\u548C\u6570\u636E\u4E22\u5931\uFF0C\u53EF\u4EE5\u8BBE\u7F6E\u6210false
# false\u7684\u60C5\u51B5\u4E0B\uFF0C\u5982\u679C\u6CA1\u6709\u4E0A\u62A5\u504F\u79FB\u91CF\uFF0C\u4F1A\u51FA\u73B0\u91CD\u542F\u65F6\u62C9\u53D6\u5168\u90E8\u6570\u636E
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000
# \u4E00\u6B21\u83B7\u53D6\u7684\u6700\u5C0F\u6570\u636E\u91CF
spring.kafka.consumer.fetch-min-size=10240
# \u6570\u636E\u91CF\u65E0\u6CD5\u6EE1\u8DB3 fetch-min-size \u65F6\u7684\u6700\u5927\u963B\u585E\u65F6\u95F4
spring.kafka.consumer.fetch-max-wait=1000
# \u6BCF\u6B21 poll \u80FD\u8FD4\u56DE\u7684\u6700\u5927 records \u6570
spring.kafka.consumer.max-poll-records=20
# \u6D88\u8D39\u8005\u5728\u8BFB\u53D6\u4E00\u4E2A\u6CA1\u6709\u504F\u79FB\u91CF\u7684\u5206\u533A\u6216\u8005\u504F\u79FB\u91CF\u65E0\u6548\u7684\u60C5\u51B5\u4E0B\u7684\u5904\u7406
# earliest\uFF1A\u5728\u504F\u79FB\u91CF\u65E0\u6548\u7684\u60C5\u51B5\u4E0B\uFF0C\u6D88\u8D39\u8005\u5C06\u4ECE\u8D77\u59CB\u4F4D\u7F6E\u8BFB\u53D6\u5206\u533A\u7684\u8BB0\u5F55
# latest: \u5728\u504F\u79FB\u91CF\u65E0\u6548\u7684\u60C5\u51B5\u4E0B\uFF0C\u6D88\u8D39\u8005\u5C06\u4ECE\u6700\u65B0\u4F4D\u7F6E\u8BFB\u53D6\u5206\u533A\u7684\u8BB0\u5F55
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
