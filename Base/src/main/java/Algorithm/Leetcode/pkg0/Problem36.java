package Algorithm.Leetcode.pkg0;

/**
 * Created by user-hfc on 2021/9/17.
 *
 * 36. 有效的数独
 *
 * 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 注意：
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 *
 * 示例 1：
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 *
 * 示例 2：
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 *
 * 提示：
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 *
 */
public class Problem36 {

    public boolean isValidSudoku(char[][] board) {
        boolean[][] box = new boolean[3][3];    // 分成 3x3 的区域
        int[] xFlag = new int[9];
        int[] yFlag = new int[9];

        char point = '.';
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == point) continue;

                int boxX = i / 3;
                int boxY = j / 3;

                int flag = 0;
                if (!box[boxX][boxY]) {
                    for (int ii = 3 * boxX; ii < 3 * boxX + 3; ii++) {
                        for (int jj = 3 * boxY; jj < 3 * boxY + 3; jj++) {
                            if (board[ii][jj] == point) continue;

                            int offset = 1 << (board[ii][jj] - '0');
                            if ((flag & offset) != 0) {
                                return false;
                            } else {
                                flag = flag | offset;
                            }

                            if ((xFlag[ii] & offset) != 0) {
                                return false;
                            } else {
                                xFlag[ii] = xFlag[ii] | offset;
                            }

                            if ((yFlag[jj] & offset) != 0) {
                                return false;
                            } else {
                                yFlag[jj] = yFlag[jj] | offset;
                            }
                        }
                    }
                }
                box[boxX][boxY] = true;
            }
        }

        return true;
    }

    public static void main(String[] args) {
        Problem36 p = new Problem36();

        char[][] board = new char[][] {{'5','3','.','.','7','.','.','.','.'}
                                      ,{'6','.','.','1','9','5','.','.','.'}
                                      ,{'.','9','8','.','.','.','.','6','.'}
                                      ,{'8','.','.','.','6','.','.','.','3'}
                                      ,{'4','.','.','8','.','3','.','.','1'}
                                      ,{'7','.','.','.','2','.','.','.','6'}
                                      ,{'.','6','.','.','.','.','2','8','.'}
                                      ,{'.','.','.','4','1','9','.','.','5'}
                                      ,{'.','.','.','.','8','.','.','7','9'}};
        System.out.println(p.isValidSudoku(board)); // true

        board = new char[][] {{'8','3','.','.','7','.','.','.','.'}
                             ,{'6','.','.','1','9','5','.','.','.'}
                             ,{'.','9','8','.','.','.','.','6','.'}
                             ,{'8','.','.','.','6','.','.','.','3'}
                             ,{'4','.','.','8','.','3','.','.','1'}
                             ,{'7','.','.','.','2','.','.','.','6'}
                             ,{'.','6','.','.','.','.','2','8','.'}
                             ,{'.','.','.','4','1','9','.','.','5'}
                             ,{'.','.','.','.','8','.','.','7','9'}};
        System.out.println(p.isValidSudoku(board)); // false

        board = new char[][] {{'.','.','4','.','.','.','6','3','.'},
                              {'.','.','.','.','.','.','.','.','.'},
                              {'5','.','.','.','.','.','.','9','.'},
                              {'.','.','.','5','6','.','.','.','.'},
                              {'4','.','3','.','.','.','.','.','1'},
                              {'.','.','.','7','.','.','.','.','.'},
                              {'.','.','.','5','.','.','.','.','.'},
                              {'.','.','.','.','.','.','.','.','.'},
                              {'.','.','.','.','.','.','.','.','.'}};
        System.out.println(p.isValidSudoku(board)); // false
    }

}
